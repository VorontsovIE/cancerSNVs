$:.unshift File.absolute_path('../../lib', __dir__)
require 'set'
require 'optparse'
require 'sequence_with_snp'

output_folder = 'shuffled_mutations'
seed_multiplier = nil
OptionParser.new do |opts|
  opts.banner = "Usage: #{opts.program_name} <file with SNV sequences with flanks> <suffix-index start> <suffix-index finish> [options]\n" +
                "Suffix indices are added to SNV name to create unique SNV names"
  opts.on('--random-seed SEED', 'Sequences with a certain index are generated by shuffling',
                                'with randomize seed equal to (SEED * suffix index)') {|seed|
    seed_multiplier = seed.to_i
  }
  opts.on('--output-folder FOLDER', 'Seed randomizer for sequence shuffling') {|folder|
    output_folder = folder
  }
end.parse!(ARGV)


snvs_filename = ARGV[0]      # './source_data/SNV_sequences.txt'
suffix_from = ARGV[1].to_i  # 1
suffix_to = ARGV[2].to_i    # 10

Dir.mkdir(output_folder)  unless Dir.exist?(output_folder)
file_basename = File.basename(snvs_filename, File.extname(snvs_filename))

raise 'Specify file with SNV sequences' unless snvs_filename
raise 'Specify suffix start and end' unless suffix_from && suffix_to

snv_sequences = File.readlines(snvs_filename).reject{|line|
  line.start_with?('#')
}.map{|line|
  name, seq = line.chomp.split("\t")
  SequenceWithSNP.from_string(seq, name: name)
}

(suffix_from..suffix_to).map do |suffix|
  srand(seed_multiplier * suffix)  if seed_multiplier
  File.open(File.join(output_folder, "#{file_basename}_shuffle_#{suffix}.txt"), 'w') do |fw|
    snv_sequences.each do |snv_seq|
      fw.puts snv_seq.shuffle_flanks(name: "#{snv_seq.name}_#{suffix}")
    end
  end
end
