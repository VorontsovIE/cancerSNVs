$:.unshift File.absolute_path('../../lib', __dir__)
require 'set'
require 'optparse'
require 'sequence_with_snv'

fold = 1

OptionParser.new do |opts|
  opts.banner = "Usage: #{opts.program_name} <file with SNV sequences with flanks> [options]\n" +
                "Suffix indices are added to SNV name to create unique SNV names"
  opts.on('--random-seed SEED', 'Sequences with a certain index are generated by shuffling',
                                'with randomize seed') {|value|
    srand(Integer(value))
  }

  opts.on('--fold FOLD', 'Generate FOLD random sequences per given sequence'){|value|
    fold = Integer(value)
  }
end.parse!(ARGV)

sequence_hashes = Set.new

raise 'Specify file with SNV sequences'  unless snvs_filename = ARGV[0]      # './results/intermediate/SNV_sequences.txt'

File.open(snvs_filename) do |f|
  f.each_line.lazy.reject{|line|
    line.start_with?('#')
  }.each{|line|
    name, str = line.chomp.split("\t")
    seq_w_snv = SequenceWithSNV.from_string(str)

    fold.times{|suffix|
      name_of_shuffled = "#{name}_#{suffix}"
      shuffled_seq = seq_w_snv.with_flanks_shuffled
      shuffled_seq = seq_w_snv.with_flanks_shuffled  while sequence_hashes.include?(shuffled_seq.hash) # ignore possible duplicates
      sequence_hashes << shuffled_seq.hash
      puts [name_of_shuffled, shuffled_seq].join("\t")
    }
  }
end
